<?php
Load::FromClasses('controller_base');
//a function used to load models
Load::FromModels("contactgroup");
//a function used to load datamaps
Load::FromDataMappers("group");
Load::FromDataMappers("user");

class Controller_ContactGroup	 extends Controller_Base
{
	
	function index ()
	{
		
	}
	
	
	function viewgroups ()
	{
		if(!Authenticator::IsLogged())
				header("Location: ../user/login");
		
		$user = new User($this->registry, Authenticator::GetLoggedUserId());
		
		//contacts that will be listed  in this page
		$groups = array();
		//Gets page number
		$thisPage= 1;
		$currentLetter;
		if(isset($_GET['letter']))
		{
			$currentLetter = $_GET['letter'];
		}
		if(isset($_GET["page"]))
		{
			$thisPage=$_GET["page"]; 
		}
		//Get a model for phonebook table, and gets a list for the contacts in the DB
		$groupModel = new ContactGroup($this->registry);
		$groupsId = $groupModel->GetBy("owner", Authenticator::GetLoggedUserId(), array("id"));
		//calculates the total number of pages according to total contacts in the table
		$pagesNum = (count($groupsId) / $user['numOfRowsPerPage'])+1;
		
		//checks if there is an error in iput page, user can input a page number that is out of range of contacts in db
		while($user['numOfRowsPerPage']*($thisPage-1) > count($groupsId))
		{
			$thisPage--;
		}
		
		//offset : from the prev. contacts listed in prev. pages
		$offset = $user['numOfRowsPerPage']*($thisPage-1);
		
		//calculates number of contacts to be loaded in current page, which i made a default number 
		//of 10, but it can be changed later as a setting for each user, the equality is used to, 
		//specially for a last page, as it can contain less than 10 contacts, according to number of contacts in db
		
		$numToBeLoaded = count($groupsId)-$offset < 10 ? abs(count($groupsId)-$offset) : 10;
	  for($i = $offset ; $i < $offset+$numToBeLoaded ; $i++ )
		{
			//here I add Contact instances to the array, this is a battern called Data mapper, you can see this class under  datamaps/contact.php
			$groups[] = new Group($this->registry, $groupsId[$i]["id"]);
		}
		
		$groups = $this->search($groups);
		
		
		$_GET['sortby'] = "name";
		
		$dir = isset($_GET['dir']) ? $_GET['dir'] : "desc";

		$groups = $this->GroupsSort($groups, $_GET['sortby'], $dir);
		//geting rows
		$rows ="";
		foreach($groups as $group)
		{
			if((isset($currentLetter) && $currentLetter !="" &&ucfirst( $currentLetter[0] )!= ucwords($group["firstName"][0]))  )
			{
				continue;
			}
				$replace = array(
				"id" => $group['id'],
				"name" => $group['name'],
				"avatar" => $group['avatar']
				);
				$row =" ". $this->get_replace("views/contactgroup/viewgroups/row.php",$replace);
				$rows .= $row;
			
		
		}
		
		//getting pages numbers :
		$pages ="";
		for( $i = 1 ; $i <= $pagesNum ; $i++)
		{
			if($thisPage == $i)
      {
      	
    		$link = $i;
      }
      else
      {
      	
      	$link = "<a href=\"".urlSetGet(getPageUrl(),"page",$i)."\"> {$i}</a>";
      }
			$replace = array("i" => $link);
			$page = $this->get_replace("views/contactgroup/viewgroups/pagenum.php",$replace);
			$pages .= $page;
		}
		//getting letters :
		$letter = 'A' ;
		$letters ="";
    for($i=0;$i<26;$i++){
      if(!isset($currentLetter) || $letter != $currentLetter)
      {
      	$link = "<a href=\"".urlSetGet(getPageUrl(),"letter",$letter)."\"> {$letter}</a>";
      }
      else
      {
      	$link = $letter;
      }
      $letter++;
      $letterText = $this->get_replace("views/contactgroup/viewgroups/letter.html",array("letter" => $link));
      $letters .= $letterText;
    }
    if (isset($currentLetter))
    {
			$letters .=  "<a href=\" ../contactgroup/viewgroups\"> All</a>";
		}
		else
		{
			$letters .= " All";
		}
		
		$searchOptions="";
		
			
			$searchOptions .= "<option>name</option>";
		
		
		
		$searchForm = $this->get_replace("views/contactgroup/viewgroups/searchform.html",array("options" => $searchOptions,"table" => "contactgroup", "currentUrl" => getPageUrl()));
		
		$upGif = "<img src=\"../views/images/up.gif\">" ;
		$downGif = "<img src=\"../views/images/down.gif\">" ;
		$c=$n=$h=$m="";
		
		$sortByNameUrl = urlSetGet(getPageUrl(),"sortby","name");
		$sortByNameUrl = urlSetGet($sortByNameUrl,"dir","desc");
		
		
		
		
		if($_GET['sortby']=="name" )
		{
			if($dir=="desc")
			{
				$sortByNameUrl = urlSetGet($sortByNameUrl,"dir","asc");
				$n =  $upGif;
			}
			else if($dir=="asc")
			{
				$sortByNameUrl = urlSetGet($sortByNameUrl,"dir","desc");
				$n = $downGif;
			}
		}
		
		$replace = array(
							"sortByNameUrl" => $sortByNameUrl,
							"n^" => $n,
							);
							
		//get table header
		$tableHeader = $this->get_replace("views/contactgroup/viewgroups/tableheader.html",$replace);
		
		//getting main page : 
		$view = $this->get_replace("views/contactgroup/viewgroups/viewgroups.html", array("rows" => $rows, "pages" => $pages , "letters" => $letters, "searchForm" => $searchForm,"tableHeader" =>$tableHeader));
		echo $view;
		
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	function addgroup()
	{
		
		if(!Authenticator::IsLogged())
				header("Location: ../user/login");
			
		if(isset($_POST['name']))
		{
			
			
			$newGroup = new Group ($this->registry);
			foreach($newGroup as $key => $value )
			{
				if(isset($_POST[$key])&& $_POST[$key]!="")
				{
				
					
					$newGroup[$key] = $_POST[$key];

				}
			}
			$newGroup['owner'] = Authenticator::GetLoggedUserId();
			$newGroup->AddToDb();
			header("Location: ../contactgroup/viewgroups");
		}
		
		
		$view = $this->get("views/contactgroup/addgroup/addgroup.html");
		echo $view;
		
		
	}
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	function editgroup()
	{
		if(!Authenticator::IsLogged())
			header("Location: ../user/login");
		if(!(isset($_GET['id']) || isset($_POST['id'])))
		{
			header("Location: ../contactgroup/viewgroups");
		}
		$groupToEdit = isset($_GET['id']) ? new Group($this->registry, $_GET['id']) : new Group($this->registry,$_POST['id']);		
		
		
		if($groupToEdit['owner'] != Authenticator::GetLoggedUserId())
			header("Location: ../contacts/phonebook");
		
		if (Authenticator::GetloggedUserId() != $groupToEdit['owner'] )
			header("Location: ../contacts/phonebook");
		if(isset($_POST['id'])&&isset($_POST['name']))
		{			
			
			unset($_POST['owner']);
			unset($_POST['parentID']);
			
		
			$groupToEdit['name'] = $_POST['name'];
			if(isset($_POST['avatar']))
				$groupToEdit['avatar'] = $_POST['avatar'];
			$groupToEdit->UpdateDB();
			header("Location: ../contactgroup/viewgroups");
		}

		if(isset($_GET['id']))
		{
			$replace = array(
							"id" => $groupToEdit['id'],
							"name" => $groupToEdit['name'],
							"avatar" => $groupToEdit['avatar']
								);
								
			$view = $this->get_replace("views/contactgroup/editgroup/editgroup.html", $replace);
			echo $view;
			
		}
		
		
		
	}
	
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	
	
	private function search($arr)
	{
		
		if(isset($_GET['table']) && isset($_GET['searchIn']))
		{
			$searchedArr = array();
			$searchFor = $_GET['searchFor'];
			$searchIn = $_GET['searchIn'];
		
			foreach($arr as $item)
			{
				$found = false;
				foreach($item as $field => $value)
				{
					if($field = $searchIn && ucwords( $value )== ucwords($searchFor ))
					{
						//(stristr($value,$searchFor) != false)
						$found = true;
					}
				}
				if($found)
				{
					$searchedArr [] = $item;
				}
			}
			return $searchedArr;
		}
		
		return $arr;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private function GroupsSort($arr, $sortBy, $dir)
	{
		
		$arrToSort = array();
		for($i=0 ; $i< count($arr);$i++)
		{
			$valueToBeSorted = $sortBy == $arr[$i][$sortBy];
			$arrToSort[] = array($i, $valueToBeSorted);
		}
		
		usort($arrToSort, "CustomSearch");
		
		
		if($dir=="asc")
		{
			
			$arrToSort=array_reverse($arrToSort);
		}
			
		
		$sortedArr = array();
		
		foreach($arrToSort as $sItem)
		{
			$sortedArr[] = $arr[$sItem[0]];
		}
		return $sortedArr;
	}
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	function deletegroup()
	{
		foreach($_POST as $key => $value)
		{
			if(is_int($key))
			{
				$groupToDelete = new Group($this->registry, $key);
				if($groupToDelete['owner'] == Authenticator::GetLoggedUserId())
				{
				$groupToDelete->DeleteGroup();
				
				}
			
			}
		}
		header("Location: ../contactgroup/viewgroups");
		
		
	}
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
 function action ()
	{
		if(!Authenticator::IsLogged())
			header("Location: ../user/login");
		if(!isset($_POST['action']))
			header("Location: ../contactgroup/viewgroups");
		
		if($_POST['action'] == "Delete")
		{
			$this->deletegroup();
		}
		
		

	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
}

?>